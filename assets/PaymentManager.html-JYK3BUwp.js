import{_ as n,c as i,b as o,a as t,d as r,e as s,f as l,r as c,o as p}from"./app-B4RDuWFj.js";const m="/system-integrator-toolkit/assets/pm4ml_system_architecture-lIRtc62R.png",d="/system-integrator-toolkit/assets/payment_manager_architecture-Ci51ShCA.png",g={};function h(u,e){const a=c("RouteLink");return p(),i("div",null,[e[3]||(e[3]=o('<h1 id="payment-manager-oss" tabindex="-1"><a class="header-anchor" href="#payment-manager-oss"><span>Payment Manager OSS</span></a></h1><p>Building, validating, and operating a service that connects a Digital Financial Service Provider’s (DFSP’s) core systems to a Mojaloop real-time payments network requires a detailed understanding of the business, technical, and operational requirements of that network. Payment Manager makes the integration path to Mojaloop easier.</p><p>Payment Manager provides tools to manage connections, services, and transaction monitoring, and it also provides a single point to configure the DFSP environment to go from a test to a real-time one.</p><p>Payment Manager is made up of the following major components:</p><ul><li><strong>Core Connector:</strong> Integrates a DFSP’s Core Backend to Payment Manager as an &quot;adapter&quot; for both parts so communication is possible between them. It uses standard templates, the majority of them written in Apache Camel, a declarative language for integration engineers that does not require writing code from scratch.</li><li><strong>Mojaloop Connector:</strong> Comes with the following key components: <ul><li>A Mojaloop-SDK, which provides Mojaloop-compliant security components and HTTP header processing capabilities, as well as a simplified version of the Mojaloop API.</li><li>A Connection Manager Client, which simplifies and automates certificate creation, signing and exchange, as well as the configuration of the connections required to different environments.</li></ul></li><li><strong>Business and Technical Portals:</strong> Provide dashboards for monitoring transactions and service status. They also allow DFSPs to manage their security keys, certificates and endpoint configuration required for connecting to Mojaloop-based schemes.</li></ul><p><img src="'+m+'" alt="Payment Manager Architecture"></p><p>Payment Manager abstracts away the complexity of the Mojaloop API and helps the DFSP understand their relationship with the scheme, focusing on the key business and technical areas.</p><p>Payment Manager can reduce technical risk, as well as ongoing operational capability needs, thereby reducing costs for development and integration with a Mojaloop Hub.</p><p>A few words about Payment Manager technology:</p><ul><li>Payment Manager is provided as a set of Linux container images (docker) and may be hosted on-premise using commodity server infrastructure or in appropriate cloud infrastructure where available.</li><li>Payment Manager scales from a very small footprint to handling many hundreds of transactions per second (dependent on the performance of the DFSP&#39;s Core Backend).</li><li>Payment Manager comes with turn-key integration options.</li></ul><p><a href="https://rtplex.io/payment-manager-oss/" target="_blank" rel="noopener noreferrer">Here</a> is a link to get more information.</p><h2 id="technical-introduction" tabindex="-1"><a class="header-anchor" href="#technical-introduction"><span>Technical Introduction</span></a></h2><p>At a high level, onboarding to a Mojaloop-based scheme requires a Digital Financial Service Provider (DFSP) to focus their efforts around the following major milestones:</p><ul><li>Integration of their Core Backend with the Mojaloop Switch on the API level (this involves both coding and testing).</li><li>Connecting to Mojaloop pre-production and production environments following rigorous Mojaloop security requirements.</li></ul><p>Payment Manager for Mojaloop provides functionality to simplify both of these steps. This document provides details about API-level integration.</p><p>The following diagram provides a high-level view of the integration between a Mojaloop Real-Time Payment System and a DFSP’s Core Backend.</p><p><img src="'+d+'" alt="Payment Manager Architecture"></p><p>Payment Manager provides the following components:</p>',18)),t("ul",null,[e[2]||(e[2]=o("<li><p><strong>Core Connector:</strong> Integrates a DFSP’s Core Backend to Payment Manager as an &quot;adapter&quot; for both parts so communication is possible between them. It uses standard templates, the majority of them written in Apache Camel, a declarative language for integration engineers that does not require writing code from scratch. There is a ready-made Core Connector template available for DFSPs to simplify their development effort.</p></li><li><p><strong>Mojaloop Connector:</strong> Comes with the following key components:</p><ul><li>A Mojaloop-SDK, which provides: <ul><li>Mojaloop-compliant security components</li><li>HTTP header processing capabilities</li><li>A simplified use-case-oriented version of the Mojaloop FSPIOP API. DFSPs will be talking to this API, leveraging Core Connector.</li></ul></li><li>A Connection Manager Client, which simplifies and automates certificate creation, signing and exchange, as well as the configuration of the connections required to different environments.</li></ul></li>",2)),t("li",null,[e[1]||(e[1]=t("p",null,[t("strong",null,"Portals:"),r(" Provide dashboards for monitoring transactions and service status. They also allow DFSPs to manage their security keys, certificates, and endpoint configuration required for connecting to a Mojaloop-based scheme in a guided way.")],-1)),t("ul",null,[t("li",null,[s(a,{to:"/md-docs/PM4ML_TransferOverview.html"},{default:l(()=>e[0]||(e[0]=[t("strong",null,"Transfers Overview Guide",-1)])),_:1})])])])])])}const y=n(g,[["render",h],["__file","PaymentManager.html.vue"]]),P=JSON.parse('{"path":"/md-docs/PaymentManager.html","title":"Payment Manager OSS","lang":"en-US","frontmatter":{},"headers":[{"level":2,"title":"Technical Introduction","slug":"technical-introduction","link":"#technical-introduction","children":[]}],"git":{"updatedTime":1732302442000,"contributors":[{"name":"PaulGregoryBaker","email":"paul.gregory.baker@gmail.com","commits":1,"url":"https://github.com/PaulGregoryBaker"}]},"filePathRelative":"md-docs/PaymentManager.md"}');export{y as comp,P as data};
