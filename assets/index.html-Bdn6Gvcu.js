import{_ as a,a as s}from"./Proxy pattern - On Demand Discovery - Identifier Cache Invalid-CHk90vq0.js";import{_ as n}from"./Proxy pattern - P2P-Ddrix9z4.js";import{_ as r,c as t,b as i,o}from"./app-B4RDuWFj.js";const l="/system-integrator-toolkit/assets/Proxy%20pattern%20-%20Happy%20path-lhmH91xb.png",c="/system-integrator-toolkit/assets/Proxy%20pattern%20-%20Unhappy%20path-DbbiKV94.png",d="/system-integrator-toolkit/assets/SettingUpProxys-CRf4njAe.png",h="/system-integrator-toolkit/assets/InterschemeAccounts-Clearing-CMI6kUEE.png",p={};function m(g,e){return o(),t("div",null,e[0]||(e[0]=[i('<h1 id="inter-scheme-using-national-switches-design" tabindex="-1"><a class="header-anchor" href="#inter-scheme-using-national-switches-design"><span>Inter scheme using national switches Design</span></a></h1><p>The proxy implementation method to connect schemes does the following.</p><ol><li>Leverages the trust relationship between scheme so that a transaction only has a single pre-funding requirement at the Payer&#39;s scheme.</li><li>Ensures non-repudiation across schemes; removing the requirement for the cross-network proxy to take on responsibility for clearing; which removes costs</li></ol><p>The schemes are connected via a proxy participant, that is registered to act as a proxy in the scheme for adjacent but connected dfsps in other schemes. Essentially, the two connected schemes behave as if they where a single scheme.</p><p>This design make the following assumptions</p><ol><li>No two connected participant have the same identifier</li><li>Get \\transfer request are resolved at the payee scheme</li><li>Timeouts in non-payee schemes are disabled (maybe enlarged)</li></ol><div style="page-break-after:always;"></div><h2 id="general-patterns" tabindex="-1"><a class="header-anchor" href="#general-patterns"><span>General Patterns</span></a></h2><p>There are certain general patterns that emerge</p><h3 id="happy-path-patterns" tabindex="-1"><a class="header-anchor" href="#happy-path-patterns"><span>Happy Path Patterns</span></a></h3><p><img src="'+l+'" alt="Happy Path Patterns"></p><div style="page-break-after:always;"></div><h3 id="error-patterns" tabindex="-1"><a class="header-anchor" href="#error-patterns"><span>Error Patterns</span></a></h3><p><img src="'+c+'" alt="Error Patterns"></p><h2 id="detailed-design-of-on-demand-discovery" tabindex="-1"><a class="header-anchor" href="#detailed-design-of-on-demand-discovery"><span>Detailed Design of on Demand Discovery</span></a></h2><p>The discovery flows are summarized as follows:</p><ol><li>On Demand loading of cross network identifiers - using Oracles for identifier lookups in local scheme</li><li>On Demand loading for all identifiers</li></ol><h3 id="on-demand-discovery-using-local-oracles" tabindex="-1"><a class="header-anchor" href="#on-demand-discovery-using-local-oracles"><span>On Demand Discovery using local oracles</span></a></h3><ul><li>Scheme uses Oracles to map local identifiers to participants of the scheme</li><li>Identifiers for other schemes are discovered via a depth first search, but asking all participants. Proxy participant then forward the request to the connected scheme</li><li>This diagram shows two connected schemes, but this design work for any number of connected schemes.</li></ul><p><img src="'+a+'" alt="Proxy pattern - On Demand Discovery with Oracles"></p><h3 id="on-demand-discover-with-incorrectly-cached-results" tabindex="-1"><a class="header-anchor" href="#on-demand-discover-with-incorrectly-cached-results"><span>On Demand Discover with incorrectly cached results</span></a></h3><ul><li>When an identifier moved to another dfsp provider, then the store cache for that participant will route to an unsuccessful get \\parties call.</li></ul><p>Here is a sequence diagram show how that gets updated.</p><h4 id="sequence-diagram" tabindex="-1"><a class="header-anchor" href="#sequence-diagram"><span>Sequence Diagram</span></a></h4><p><img src="'+s+'" alt="Invalid Cache"></p><h2 id="p2p-flow-across-network-using-proxy" tabindex="-1"><a class="header-anchor" href="#p2p-flow-across-network-using-proxy"><span>P2P flow across network using Proxy</span></a></h2><p>This design make the following assumptions</p><ol><li>No two connected participant have the same identifier</li><li>No limit checks are done against proxy participants</li><li>Get \\transfers request are resolved at the payee scheme</li><li>Timeouts in non-payee schemes are disabled.</li></ol><h3 id="sequence-diagram-1" tabindex="-1"><a class="header-anchor" href="#sequence-diagram-1"><span>Sequence Diagram</span></a></h3><p>Here is a sequence diagram show the Agreement and Transfer stages of a transaction, and how the Get Transfer is resolved.</p><p><img src="'+n+'" alt="P2P flow"></p><div style="page-break-after:always;"></div><h2 id="admin-api-defining-proxy-participants" tabindex="-1"><a class="header-anchor" href="#admin-api-defining-proxy-participants"><span>Admin API - defining Proxy Participants</span></a></h2><p><img src="'+d+'" alt="Admin API"></p><h2 id="clearing-accounts-for-inter-scheme-fx-transfers" tabindex="-1"><a class="header-anchor" href="#clearing-accounts-for-inter-scheme-fx-transfers"><span>Clearing Accounts for Inter-scheme FX transfers</span></a></h2><p><img src="'+h+'" alt="Clearing Accounts"></p>',36)]))}const v=r(p,[["render",m],["__file","index.html.vue"]]),w=JSON.parse('{"path":"/Inter-SchemeDesign/","title":"Inter scheme using national switches Design","lang":"en-US","frontmatter":{},"headers":[{"level":2,"title":"General Patterns","slug":"general-patterns","link":"#general-patterns","children":[{"level":3,"title":"Happy Path Patterns","slug":"happy-path-patterns","link":"#happy-path-patterns","children":[]},{"level":3,"title":"Error Patterns","slug":"error-patterns","link":"#error-patterns","children":[]}]},{"level":2,"title":"Detailed Design of on Demand Discovery","slug":"detailed-design-of-on-demand-discovery","link":"#detailed-design-of-on-demand-discovery","children":[{"level":3,"title":"On Demand Discovery using local oracles","slug":"on-demand-discovery-using-local-oracles","link":"#on-demand-discovery-using-local-oracles","children":[]},{"level":3,"title":"On Demand Discover with incorrectly cached results","slug":"on-demand-discover-with-incorrectly-cached-results","link":"#on-demand-discover-with-incorrectly-cached-results","children":[]}]},{"level":2,"title":"P2P flow across network using Proxy","slug":"p2p-flow-across-network-using-proxy","link":"#p2p-flow-across-network-using-proxy","children":[{"level":3,"title":"Sequence Diagram","slug":"sequence-diagram-1","link":"#sequence-diagram-1","children":[]}]},{"level":2,"title":"Admin API - defining Proxy Participants","slug":"admin-api-defining-proxy-participants","link":"#admin-api-defining-proxy-participants","children":[]},{"level":2,"title":"Clearing Accounts for Inter-scheme FX transfers","slug":"clearing-accounts-for-inter-scheme-fx-transfers","link":"#clearing-accounts-for-inter-scheme-fx-transfers","children":[]}],"git":{"updatedTime":1732302442000,"contributors":[{"name":"PaulGregoryBaker","email":"paul.gregory.baker@gmail.com","commits":1,"url":"https://github.com/PaulGregoryBaker"}]},"filePathRelative":"Inter-SchemeDesign/Readme.md"}');export{v as comp,w as data};
